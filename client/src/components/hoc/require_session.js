import React, { Component } from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import _ from 'lodash';
import { destroySession, fetchHouse,
  sessionFromToken } from '../../actions/';

export default function (ComposedComponent) {
  class Authentication extends Component {
    async loadUserFromToken() {
      let token = localStorage.getItem('token');

      // if user exist we dont need to load token
      if (!_.isNil(this.props.user)) {
        return true;
      }
      if(_.isEmpty(token)) {//if there is no token, dont bother
        return this.props.destroySession();
      }

     //fetch user from token (if server deems it's valid token)
      const response = await this.props.sessionFromToken(token);
      if (!response.error) {
        //reset token (possibly new token that was regenerated by the server)
        localStorage.setItem('token', response.data.token);
        this.props.fetchHouse(response.data.user.house_slug_id);
      } else {
        alert('ðŸ’¥ Oups ! Ta session a expirÃ© : reconnecte toi !')
        localStorage.removeItem('token');//remove token from storage
        this.props.history.push('/login');
      }
    }

    resetMe() {
      localStorage.removeItem('token'); //remove token from storage
      this.props.destroySession();
    }

    componentWillMount() {
      this.loadUserFromToken();
    }

    componentWillReceiveProps(nextProps) {
      const { history } = this.props;
      if (_.isEmpty(localStorage.getItem('token'))) {
        history.push('/login')
      }
    }
    PropTypes = {
      router: PropTypes.object,
    }

    render() {
      return <ComposedComponent {...this.props} />;
    }
  }

  function mapStateToProps({session, houses}) {
    return { user: session.user,
             house: session.user && houses[session.user.house_slug_id] }
  }

  return connect(mapStateToProps, { fetchHouse, destroySession, sessionFromToken })(Authentication);
}